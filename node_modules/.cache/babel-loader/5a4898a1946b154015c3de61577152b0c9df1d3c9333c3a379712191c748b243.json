{"ast":null,"code":"\"use client\";\n\n// 🎯 MAIN REACT APPLICATION\n// This is the main component that manages all screens and state\nvar _jsxFileName = \"D:\\\\Polling System\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\n\n// Import all screen components\nimport WelcomeScreen from \"./components/WelcomeScreen/WelcomeScreen\";\nimport NameInputScreen from \"./components/NameInputScreen/NameInputScreen\";\nimport CreatePollScreen from \"./components/CreatePollScreen/CreatePollScreen\";\nimport TeacherDashboard from \"./components/TeacherDashboard/TeacherDashboard\";\nimport StudentWaitingScreen from \"./components/StudentWaitingScreen/StudentWaitingScreen\";\nimport StudentPollScreen from \"./components/StudentPollScreen/StudentPollScreen\";\nimport StudentResultsScreen from \"./components/StudentResultsScreen/StudentResultsScreen\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // 🎯 CORE STATE MANAGEMENT\n  const [currentScreen, setCurrentScreen] = useState(\"welcome\");\n  const [userRole, setUserRole] = useState(\"\");\n  const [userName, setUserName] = useState(\"\");\n  const [userId, setUserId] = useState(\"\");\n\n  // 📊 POLL STATE\n  const [currentPoll, setCurrentPoll] = useState(null);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [hasVoted, setHasVoted] = useState(false);\n\n  // 🎨 UI STATE\n  const [participants, setParticipants] = useState([]);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [timer, setTimer] = useState(60);\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // 🆔 INITIALIZE USER SESSION\n  useEffect(() => {\n    const sessionId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    setUserId(sessionId);\n    console.log(\"🆔 User session created:\", sessionId);\n  }, []);\n\n  // ⏱️ REAL-TIME POLLING (Every 2 seconds)\n  useEffect(() => {\n    if (currentScreen === \"teacher-dashboard\" || currentScreen === \"student-poll\" || currentScreen === \"student-waiting\" || currentScreen === \"student-results\") {\n      console.log(\"🔄 Starting real-time polling...\");\n      fetchActivePolls();\n      const interval = setInterval(() => {\n        fetchActivePolls();\n        if (currentPoll !== null && currentPoll !== void 0 && currentPoll.id) {\n          fetchParticipants();\n          fetchChatMessages();\n        }\n      }, 2000);\n      return () => {\n        console.log(\"🛑 Stopping real-time polling...\");\n        clearInterval(interval);\n      };\n    }\n  }, [currentScreen]);\n\n  // ⏰ TIMER MANAGEMENT\n  useEffect(() => {\n    if (isTimerRunning && timer > 0) {\n      const timerInterval = setInterval(() => {\n        setTimer(prev => {\n          if (prev <= 1) {\n            setIsTimerRunning(false);\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n      return () => clearInterval(timerInterval);\n    }\n  }, [isTimerRunning, timer]);\n\n  // 🌐 API FUNCTIONS\n\n  // Fetch active polls from server\n  const fetchActivePolls = async () => {\n    try {\n      const response = await fetch(\"/api/polls/active\");\n      const data = await response.json();\n      if (data.success && data.poll) {\n        if (!currentPoll || currentPoll.id !== data.poll.id) {\n          setCurrentPoll(data.poll);\n          setTimer(data.poll.timeLimit || 60);\n          console.log(\"📊 New poll received:\", data.poll.question);\n        }\n\n        // Auto-redirect student to poll screen\n        if (userRole === \"student\" && data.poll && !hasVoted && currentScreen === \"student-waiting\") {\n          setCurrentScreen(\"student-poll\");\n        }\n      } else if (userRole === \"student\" && currentScreen === \"student-poll\" && !data.poll) {\n        // Poll ended, redirect to waiting\n        setCurrentScreen(\"student-waiting\");\n        setSelectedOption(null);\n        setHasVoted(false);\n      }\n    } catch (error) {\n      console.error(\"❌ Failed to fetch active polls:\", error);\n    }\n  };\n\n  // Fetch participants list\n  const fetchParticipants = async () => {\n    if (!(currentPoll !== null && currentPoll !== void 0 && currentPoll.id)) return;\n    try {\n      const response = await fetch(`/api/participants?pollId=${currentPoll.id}`);\n      const data = await response.json();\n      if (data.success) {\n        setParticipants(data.participants || []);\n      }\n    } catch (error) {\n      console.error(\"❌ Failed to fetch participants:\", error);\n    }\n  };\n\n  // Fetch chat messages\n  const fetchChatMessages = async () => {\n    if (!(currentPoll !== null && currentPoll !== void 0 && currentPoll.id)) return;\n    try {\n      const response = await fetch(`/api/chat/messages?pollId=${currentPoll.id}`);\n      const data = await response.json();\n      if (data.success) {\n        setChatMessages(data.messages || []);\n      }\n    } catch (error) {\n      console.error(\"❌ Failed to fetch chat messages:\", error);\n    }\n  };\n\n  // Create new poll (Teacher)\n  const createPoll = async pollData => {\n    setIsLoading(true);\n    try {\n      console.log(\"🎯 Creating new poll:\", pollData.question);\n\n      // End previous poll if exists\n      if (currentPoll !== null && currentPoll !== void 0 && currentPoll.id) {\n        await fetch(`/api/polls/${currentPoll.id}`, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            isActive: false\n          })\n        });\n      }\n      const response = await fetch(\"/api/polls\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          ...pollData,\n          createdBy: userName,\n          createdById: userId\n        })\n      });\n      if (response.ok) {\n        const newPoll = await response.json();\n        setCurrentPoll(newPoll);\n        setTimer(newPoll.timeLimit);\n        setIsTimerRunning(true);\n        setCurrentScreen(\"teacher-dashboard\");\n\n        // Reset voting states\n        setHasVoted(false);\n        setSelectedOption(null);\n\n        // Join as teacher\n        setTimeout(() => {\n          joinPoll(newPoll.id);\n        }, 500);\n        console.log(\"✅ Poll created successfully!\");\n      }\n    } catch (error) {\n      console.error(\"❌ Failed to create poll:\", error);\n      alert(\"Failed to create poll. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Join poll as participant\n  const joinPoll = async pollId => {\n    try {\n      const response = await fetch(\"/api/participants\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          pollId: pollId || (currentPoll === null || currentPoll === void 0 ? void 0 : currentPoll.id),\n          participant: {\n            id: userId,\n            name: userName,\n            role: userRole\n          }\n        })\n      });\n      if (response.ok) {\n        console.log(\"👥 Joined poll successfully\");\n        fetchParticipants();\n      }\n    } catch (error) {\n      console.error(\"❌ Failed to join poll:\", error);\n    }\n  };\n\n  // Submit vote (Student)\n  const submitVote = async optionIndex => {\n    setIsLoading(true);\n    try {\n      console.log(`🗳️ Submitting vote: Option ${optionIndex + 1}`);\n      const response = await fetch(\"/api/polls/vote\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          pollId: currentPoll.id,\n          optionIndex,\n          userId,\n          userName\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setCurrentPoll(data.poll);\n        setHasVoted(true);\n        setCurrentScreen(\"student-results\");\n        await joinPoll();\n        console.log(\"✅ Vote submitted successfully!\");\n      }\n    } catch (error) {\n      console.error(\"❌ Failed to vote:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Kick participant (Teacher)\n  const kickParticipant = async participantId => {\n    try {\n      const response = await fetch(\"/api/participants/kick\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          participantId,\n          pollId: currentPoll.id\n        })\n      });\n      if (response.ok) {\n        console.log(\"🚫 Participant kicked successfully\");\n        fetchParticipants();\n      }\n    } catch (error) {\n      console.error(\"❌ Failed to kick participant:\", error);\n    }\n  };\n\n  // Send chat message\n  const sendChatMessage = async message => {\n    if (!message.trim()) return false;\n    try {\n      const response = await fetch(\"/api/chat/send\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          pollId: currentPoll.id,\n          user: userName,\n          message: message.trim(),\n          timestamp: new Date().toLocaleTimeString([], {\n            hour: \"2-digit\",\n            minute: \"2-digit\"\n          })\n        })\n      });\n      if (response.ok) {\n        console.log(\"💬 Message sent successfully\");\n        return true;\n      }\n    } catch (error) {\n      console.error(\"❌ Failed to send message:\", error);\n    }\n    return false;\n  };\n\n  // 🎛️ PROPS FOR ALL COMPONENTS\n  const commonProps = {\n    currentScreen,\n    setCurrentScreen,\n    userRole,\n    setUserRole,\n    userName,\n    setUserName,\n    userId,\n    currentPoll,\n    selectedOption,\n    setSelectedOption,\n    hasVoted,\n    setHasVoted,\n    participants,\n    chatMessages,\n    timer,\n    isTimerRunning,\n    setIsTimerRunning,\n    isLoading,\n    setIsLoading,\n    createPoll,\n    joinPoll,\n    submitVote,\n    kickParticipant,\n    sendChatMessage,\n    fetchActivePolls\n  };\n\n  // 🎭 SCREEN ROUTER\n  const renderScreen = () => {\n    console.log(\"🎭 Current screen:\", currentScreen);\n    switch (currentScreen) {\n      case \"welcome\":\n        return /*#__PURE__*/_jsxDEV(WelcomeScreen, {\n          ...commonProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 16\n        }, this);\n      case \"name-input\":\n        return /*#__PURE__*/_jsxDEV(NameInputScreen, {\n          ...commonProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 16\n        }, this);\n      case \"create-poll\":\n        return /*#__PURE__*/_jsxDEV(CreatePollScreen, {\n          ...commonProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 16\n        }, this);\n      case \"teacher-dashboard\":\n        return /*#__PURE__*/_jsxDEV(TeacherDashboard, {\n          ...commonProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 16\n        }, this);\n      case \"student-waiting\":\n        return /*#__PURE__*/_jsxDEV(StudentWaitingScreen, {\n          ...commonProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 16\n        }, this);\n      case \"student-poll\":\n        return /*#__PURE__*/_jsxDEV(StudentPollScreen, {\n          ...commonProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 16\n        }, this);\n      case \"student-results\":\n        return /*#__PURE__*/_jsxDEV(StudentResultsScreen, {\n          ...commonProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(WelcomeScreen, {\n          ...commonProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: renderScreen()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 346,\n    columnNumber: 10\n  }, this);\n}\n_s(App, \"fS62GVeyk+siKHYo9gW+538B7X8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useEffect","WelcomeScreen","NameInputScreen","CreatePollScreen","TeacherDashboard","StudentWaitingScreen","StudentPollScreen","StudentResultsScreen","jsxDEV","_jsxDEV","App","currentScreen","setCurrentScreen","userRole","setUserRole","userName","setUserName","userId","setUserId","currentPoll","setCurrentPoll","selectedOption","setSelectedOption","hasVoted","setHasVoted","participants","setParticipants","chatMessages","setChatMessages","timer","setTimer","isTimerRunning","setIsTimerRunning","isLoading","setIsLoading","sessionId","Date","now","Math","random","toString","substr","console","log","fetchActivePolls","interval","setInterval","id","fetchParticipants","fetchChatMessages","clearInterval","timerInterval","prev","response","fetch","data","json","success","poll","timeLimit","question","error","messages","createPoll","pollData","method","headers","body","JSON","stringify","isActive","createdBy","createdById","ok","newPoll","setTimeout","joinPoll","alert","pollId","participant","name","role","submitVote","optionIndex","kickParticipant","participantId","sendChatMessage","message","trim","user","timestamp","toLocaleTimeString","hour","minute","commonProps","renderScreen","fileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["D:/Polling System/frontend/src/App.js"],"sourcesContent":["\"use client\"\n\n// 🎯 MAIN REACT APPLICATION\n// This is the main component that manages all screens and state\n\nimport { useState, useEffect } from \"react\"\n\n// Import all screen components\nimport WelcomeScreen from \"./components/WelcomeScreen/WelcomeScreen\"\nimport NameInputScreen from \"./components/NameInputScreen/NameInputScreen\"\nimport CreatePollScreen from \"./components/CreatePollScreen/CreatePollScreen\"\nimport TeacherDashboard from \"./components/TeacherDashboard/TeacherDashboard\"\nimport StudentWaitingScreen from \"./components/StudentWaitingScreen/StudentWaitingScreen\"\nimport StudentPollScreen from \"./components/StudentPollScreen/StudentPollScreen\"\nimport StudentResultsScreen from \"./components/StudentResultsScreen/StudentResultsScreen\"\n\nimport \"./App.css\"\n\nfunction App() {\n  // 🎯 CORE STATE MANAGEMENT\n  const [currentScreen, setCurrentScreen] = useState(\"welcome\")\n  const [userRole, setUserRole] = useState(\"\")\n  const [userName, setUserName] = useState(\"\")\n  const [userId, setUserId] = useState(\"\")\n\n  // 📊 POLL STATE\n  const [currentPoll, setCurrentPoll] = useState(null)\n  const [selectedOption, setSelectedOption] = useState(null)\n  const [hasVoted, setHasVoted] = useState(false)\n\n  // 🎨 UI STATE\n  const [participants, setParticipants] = useState([])\n  const [chatMessages, setChatMessages] = useState([])\n  const [timer, setTimer] = useState(60)\n  const [isTimerRunning, setIsTimerRunning] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n\n  // 🆔 INITIALIZE USER SESSION\n  useEffect(() => {\n    const sessionId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n    setUserId(sessionId)\n    console.log(\"🆔 User session created:\", sessionId)\n  }, [])\n\n  // ⏱️ REAL-TIME POLLING (Every 2 seconds)\n  useEffect(() => {\n    if (\n      currentScreen === \"teacher-dashboard\" ||\n      currentScreen === \"student-poll\" ||\n      currentScreen === \"student-waiting\" ||\n      currentScreen === \"student-results\"\n    ) {\n      console.log(\"🔄 Starting real-time polling...\")\n      fetchActivePolls()\n\n      const interval = setInterval(() => {\n        fetchActivePolls()\n        if (currentPoll?.id) {\n          fetchParticipants()\n          fetchChatMessages()\n        }\n      }, 2000)\n\n      return () => {\n        console.log(\"🛑 Stopping real-time polling...\")\n        clearInterval(interval)\n      }\n    }\n  }, [currentScreen])\n\n  // ⏰ TIMER MANAGEMENT\n  useEffect(() => {\n    if (isTimerRunning && timer > 0) {\n      const timerInterval = setInterval(() => {\n        setTimer((prev) => {\n          if (prev <= 1) {\n            setIsTimerRunning(false)\n            return 0\n          }\n          return prev - 1\n        })\n      }, 1000)\n      return () => clearInterval(timerInterval)\n    }\n  }, [isTimerRunning, timer])\n\n  // 🌐 API FUNCTIONS\n\n  // Fetch active polls from server\n  const fetchActivePolls = async () => {\n    try {\n      const response = await fetch(\"/api/polls/active\")\n      const data = await response.json()\n\n      if (data.success && data.poll) {\n        if (!currentPoll || currentPoll.id !== data.poll.id) {\n          setCurrentPoll(data.poll)\n          setTimer(data.poll.timeLimit || 60)\n          console.log(\"📊 New poll received:\", data.poll.question)\n        }\n\n        // Auto-redirect student to poll screen\n        if (userRole === \"student\" && data.poll && !hasVoted && currentScreen === \"student-waiting\") {\n          setCurrentScreen(\"student-poll\")\n        }\n      } else if (userRole === \"student\" && currentScreen === \"student-poll\" && !data.poll) {\n        // Poll ended, redirect to waiting\n        setCurrentScreen(\"student-waiting\")\n        setSelectedOption(null)\n        setHasVoted(false)\n      }\n    } catch (error) {\n      console.error(\"❌ Failed to fetch active polls:\", error)\n    }\n  }\n\n  // Fetch participants list\n  const fetchParticipants = async () => {\n    if (!currentPoll?.id) return\n    try {\n      const response = await fetch(`/api/participants?pollId=${currentPoll.id}`)\n      const data = await response.json()\n      if (data.success) {\n        setParticipants(data.participants || [])\n      }\n    } catch (error) {\n      console.error(\"❌ Failed to fetch participants:\", error)\n    }\n  }\n\n  // Fetch chat messages\n  const fetchChatMessages = async () => {\n    if (!currentPoll?.id) return\n    try {\n      const response = await fetch(`/api/chat/messages?pollId=${currentPoll.id}`)\n      const data = await response.json()\n      if (data.success) {\n        setChatMessages(data.messages || [])\n      }\n    } catch (error) {\n      console.error(\"❌ Failed to fetch chat messages:\", error)\n    }\n  }\n\n  // Create new poll (Teacher)\n  const createPoll = async (pollData) => {\n    setIsLoading(true)\n    try {\n      console.log(\"🎯 Creating new poll:\", pollData.question)\n\n      // End previous poll if exists\n      if (currentPoll?.id) {\n        await fetch(`/api/polls/${currentPoll.id}`, {\n          method: \"PATCH\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ isActive: false }),\n        })\n      }\n\n      const response = await fetch(\"/api/polls\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          ...pollData,\n          createdBy: userName,\n          createdById: userId,\n        }),\n      })\n\n      if (response.ok) {\n        const newPoll = await response.json()\n        setCurrentPoll(newPoll)\n        setTimer(newPoll.timeLimit)\n        setIsTimerRunning(true)\n        setCurrentScreen(\"teacher-dashboard\")\n\n        // Reset voting states\n        setHasVoted(false)\n        setSelectedOption(null)\n\n        // Join as teacher\n        setTimeout(() => {\n          joinPoll(newPoll.id)\n        }, 500)\n\n        console.log(\"✅ Poll created successfully!\")\n      }\n    } catch (error) {\n      console.error(\"❌ Failed to create poll:\", error)\n      alert(\"Failed to create poll. Please try again.\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  // Join poll as participant\n  const joinPoll = async (pollId) => {\n    try {\n      const response = await fetch(\"/api/participants\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          pollId: pollId || currentPoll?.id,\n          participant: {\n            id: userId,\n            name: userName,\n            role: userRole,\n          },\n        }),\n      })\n      if (response.ok) {\n        console.log(\"👥 Joined poll successfully\")\n        fetchParticipants()\n      }\n    } catch (error) {\n      console.error(\"❌ Failed to join poll:\", error)\n    }\n  }\n\n  // Submit vote (Student)\n  const submitVote = async (optionIndex) => {\n    setIsLoading(true)\n    try {\n      console.log(`🗳️ Submitting vote: Option ${optionIndex + 1}`)\n\n      const response = await fetch(\"/api/polls/vote\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          pollId: currentPoll.id,\n          optionIndex,\n          userId,\n          userName,\n        }),\n      })\n\n      if (response.ok) {\n        const data = await response.json()\n        setCurrentPoll(data.poll)\n        setHasVoted(true)\n        setCurrentScreen(\"student-results\")\n        await joinPoll()\n        console.log(\"✅ Vote submitted successfully!\")\n      }\n    } catch (error) {\n      console.error(\"❌ Failed to vote:\", error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  // Kick participant (Teacher)\n  const kickParticipant = async (participantId) => {\n    try {\n      const response = await fetch(\"/api/participants/kick\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ participantId, pollId: currentPoll.id }),\n      })\n      if (response.ok) {\n        console.log(\"🚫 Participant kicked successfully\")\n        fetchParticipants()\n      }\n    } catch (error) {\n      console.error(\"❌ Failed to kick participant:\", error)\n    }\n  }\n\n  // Send chat message\n  const sendChatMessage = async (message) => {\n    if (!message.trim()) return false\n    try {\n      const response = await fetch(\"/api/chat/send\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          pollId: currentPoll.id,\n          user: userName,\n          message: message.trim(),\n          timestamp: new Date().toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" }),\n        }),\n      })\n      if (response.ok) {\n        console.log(\"💬 Message sent successfully\")\n        return true\n      }\n    } catch (error) {\n      console.error(\"❌ Failed to send message:\", error)\n    }\n    return false\n  }\n\n  // 🎛️ PROPS FOR ALL COMPONENTS\n  const commonProps = {\n    currentScreen,\n    setCurrentScreen,\n    userRole,\n    setUserRole,\n    userName,\n    setUserName,\n    userId,\n    currentPoll,\n    selectedOption,\n    setSelectedOption,\n    hasVoted,\n    setHasVoted,\n    participants,\n    chatMessages,\n    timer,\n    isTimerRunning,\n    setIsTimerRunning,\n    isLoading,\n    setIsLoading,\n    createPoll,\n    joinPoll,\n    submitVote,\n    kickParticipant,\n    sendChatMessage,\n    fetchActivePolls,\n  }\n\n  // 🎭 SCREEN ROUTER\n  const renderScreen = () => {\n    console.log(\"🎭 Current screen:\", currentScreen)\n\n    switch (currentScreen) {\n      case \"welcome\":\n        return <WelcomeScreen {...commonProps} />\n      case \"name-input\":\n        return <NameInputScreen {...commonProps} />\n      case \"create-poll\":\n        return <CreatePollScreen {...commonProps} />\n      case \"teacher-dashboard\":\n        return <TeacherDashboard {...commonProps} />\n      case \"student-waiting\":\n        return <StudentWaitingScreen {...commonProps} />\n      case \"student-poll\":\n        return <StudentPollScreen {...commonProps} />\n      case \"student-results\":\n        return <StudentResultsScreen {...commonProps} />\n      default:\n        return <WelcomeScreen {...commonProps} />\n    }\n  }\n\n  return <div className=\"app\">{renderScreen()}</div>\n}\n\nexport default App\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}